# Домашняя задача 2: Найдите сумму цифр трехзначного числа.
# Пример: 123 -> 6 (1 + 2 + 3) 
# 100 -> 1 (1 + 0 + 0)

# Решение:
# num = int(input("Введите трехзначное число: "))
# summa = num // 100 + num // 10 % 10 + num % 10
# print("Сумма цифр трехзначного числа: ", sum)

# num = input("Введите трехзначное число: ")
# summa = int(num[0]) + int(num[1]) + int(num[2])
# print("Сумма цифр трехзначного числа: ", summa)

# Домашняя задача 4: Петя, Катя и Сережа делают из бумаги журавликов. Вместе
# они сделали S журавликов. Сколько журавликов сделал каждый
# ребенок, если известно, что Петя и Сережа сделали одинаковое
# количество журавликов, а Катя сделала в два раза больше журавликов,
# чем Петя и Сережа вместе?
# Пример:
# 6 -> 1 4 1
# 24 -> 4 16 4 
# 60 -> 10 40 10

# Решение:

# s = int(input("Введите количество сделанных журавликов: "))
# ps = s // 6
# k = ps * 4
# print("Петя сделал", ps, "журавликов")
# print("Катя сделал", k, "журавликов")
# print("Сережа сделал", ps, "журавликов")

# Домашняя задача 6: Вы пользуетесь общественным транспортом? 
# Вероятно, вы расплачивались за проезд и получали билет с номером. 
# Счастливым билетом называют такой билет с шестизначным номером, где сумма
# первых трех цифр равна сумме последних трех. Т.е. билет с номером
# 385916 – счастливый, т.к. 3+8+5=9+1+6. Вам требуется написать
# программу, которая проверяет счастливость билета.

# Пример ответа:  
# 385916 -> yes
# 123456 -> no

# Решение:

# num = input("Введите номер билета: ")
# if len(num) != 6 or not num.isdigit(): # почему когда ставишь пробел ! = програма просит :???
#     print("Некоректный номер билета")
# else: digit = [int(d) for d in num]
# sum1 = sum(digit[:3]) #Что означет : спереди или сзади???
# sum2 = sum(digit[3:len(num)])
# if sum1 == sum2:
#     print("Билет счастливый")
# else:
#     print("Билет несчастливый")

# num = input("Введите номер билета: ")
# if len(num) != 6 or not num.isdigit():
#     print("Некоректный номер билета")
# num1 = int(num[:3])
# sum1 = num1 // 100 + num1 // 10 % 10 + num1 % 10
# num2 = int(num[3:])
# sum2 = num2 // 100 + num2 // 10 % 10 + num2 % 10
# if sum1 == sum2:
#     print("Билет счастливый")
# else:
#     print("Билет несчастливый")

# Домашняя задача 8: Требуется определить, можно ли от шоколадки размером n×m 
# долек отломить k долек, если разрешается сделать один разлом 
# по прямой между дольками (то есть разломить шоколадку на два
# прямоугольника).

# Пример проверки: 
# 3 2 4 -> yes 
# 3 2 1 -> no

# Решение: 
# n = int(input('Введите длину шоколадку: '))
# m = int(input('Введите ширину шоколадку: '))
# k = int(input('Введите как вы хотите разломить шоколадку: '))
# if k < n * m and ((k % n == 0) or (k % m == 0)):
#     print('YES')
# else:
#     print('NO')

# Домашняя задача 10: На столе лежат n монеток. Некоторые из них лежат вверх
# решкой, а некоторые – гербом. Определите минимальное число
# монеток, которые нужно перевернуть, чтобы все монетки были
# повернуты вверх одной и той же стороной. Выведите минимальное
# количество монет, которые нужно перевернуть.

# Упрощенное (объяснение)
# Пользователь вводит число n, на следующих строках нужно вводить 1 или 0, в ответ вывести 
# количество наимение встречающихся из них (тоесть либо количество 0 либо 1, 
# в зависимости от того, кого меньше)

# Что должно получиться:
#  5 -> 1 0 1 1 0 
#  2

# Решение задачи 10:

# num = input("Ввидите сколько монеток лежит на столе: ")
# while not num.isdigit():
#     print("Вы ввели не те числа попробуйте снова...")
#     num = input("Попробуйте заново ввести сколько монеток лежит на столе: ")
# num = int(num)
# zeros = 0
# ones = 0
# for _ in range(num):
#     n = input("Введите либо ноль либо один: ")
#     while n not in ("0", "1"):
#         print("Вы ввели не те числа попробуйте снова...")
#         n = input("Введите либо ноль либо один: ")
#     if n == "0":
#         zeros += 1
#     else:
#         ones += 1
# if zeros <= ones:
#     print(zeros)
# else:
#     print(ones)

# Домашняя задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. 
# Петя помогает Кате по математике. Он задумывает два натуральных числа X и Y (X,Y≤1000), 
# а Катя должна их отгадать. Для этого Петя делает две подсказки. 
# Он называет сумму этих чисел S и их произведение P. 
# Помогите Кате отгадать задуманные Петей числа.

# Проверка решения 
# 44->22
# 56->23

# Решение:

# s = int(input("Ввидите сумму загаданных чисел: ")) # ввод суммы
# p = int(input("Введите произведение загаданных чисел: ")) # ввод произведения

# for x in range(1, 1001):
#     for y in range(1, 1001):
#         if x + y == s and x * y == p:
#             print(x, y)
#             break
#     else:
#         if (y == 1):
#             print('Перепроверьте ваши данные')

# Домашняя задача 14 
# Требуется вывести все целые степени двойки (т.е. числа вида 2k), 
# не превосходящие числа N.

# Решение:

# n = int(input('Введите все целые степени двойки: ')) # ввод числа N

# power = 1 # начальная степень двойки

# while power <= n:
#     print(power, end=' ')
#     power *= 2 # увеличиваем степень двойки в два раза

# Пример ввода:

# 20

# Пример вывода:

# 1 2 4 8 16

# Домашняя задача 16: Требуется вычислить, сколько раз встречается некоторое
# число X в массиве A[1..N].
# Пользователь в первой строке вводит
# натуральное число N – количество элементов в массиве. В последующих
# строках записаны N целых чисел A_i.
# Последняя строка содержит число X

# n = int(input('Сколько раз встречается число X: ')) # считываем количество элементов в массиве
# a = list(map(int, input('Введите массив: ').split())) # считываем сам массив
# x = int(input()) # считываем число X

# count = 0 # переменная для подсчета количества вхождений X в массив

# for i in range(n): # проходим по всем элементам массива
#     if a[i] == x: # если текущий элемент равен X
#         count += 1 # увеличиваем счетчик на 1

# print(count) # выводим результат

# Другое решение

# import random
# rnd = random.randint(5, 10)
# k = int(input("Enter number: "))
# list_2 = [random.randint(10, 15) for _ in range(rnd)]
# print(list_2)
# count = 0
# for el in list_2:
#     if el == k:
#         count += 1
# print(count)

# res_list = [1 for el in list_2 if el == k]
# print(sum(res_list))

# res_list = [1 if el == k else 0 for el in list_2 ] 
# print(sum(res_list))

# res_set = {el for el in list_2 if el == k}
# print(sum(res_set))

# res_dict = {el: el*el for el in list_2 if el == k}
# print(sum(res_dict))

# Домашняя задача 18: Требуется найти в массиве A[1..N] самый близкий 
# по величине элемент к заданному числу X. 
# Пользователь в первой строке вводит натуральное число 
# N – количество элементов в массиве. 
# В последующих строках записаны N целых чисел Ai. 
# Последняя строка содержит число X

# Пример 
# 5
# 12345
# 6 -> 5

# Мое решение:

# n = int(input('Введите сколько элементов в массиве: ')) # считываем количество элементов в массиве
# a = list(map(int, input('Введите массив через пробел: ').split())) # считываем массив
# x = int(input('Введите желаймый элемент в массиве:  ')) # считываем число

# min_diff = float('inf') # инициализируем минимальную разницу бесконечностью
# closest_num = None # инициализируем ближайшее число как None

# for num in a:
#     diff = abs(num - x) # находим разницу между текущим числом и X
#     if diff < min_diff: # если разница меньше минимальной
#         min_diff = diff # обновляем минимальную разницу
#         closest_num = num # обновляем ближайшее число

# print(closest_num) # выводим ближайшее число

# Второе решение 


# n = int(input('Введите сколько элементов в массиве: ')) # считываем количество элементов в массиве
# a = [int(num) for num in input('Введите массив через пробел: ').split()] # считываем массив
# x = int(input('Введите желаймый элемент в массиве:  ')) # считываем число

# min_diff = abs(a[0] - x) # инициализируем минимальную разницу бесконечностью
# closest_list = [a[0]] # инициализируем ближайшее число как None

# for num in a[1:]:
#     diff = abs(num - x) # находим разницу между текущим числом и X
#     if diff < min_diff: # если разница меньше минимальной
#         min_diff = diff # обновляем минимальную разницу # min_dif = min(min_dif, dif)
#         closest_list = [num] # обновляем ближайшее число
#     elif diff == min_diff and num not in closest_list:
#         closest_list.append(num) 
# print(*closest_list, sep ='\n') # выводим ближайшее число # (sep) аргумент 
# print(closest_list[0], closest_list[1], ..., closest_list[n]) # пояснение 

# Домашняя задача 20: В настольной игре Скрабл (Scrabble) каждая буква имеет 
# определенную ценность. В случае с английским алфавитом очки распределяются так:

# ● A, E, I, O, U, L, N, S, T, R – 1 очко;
# ● D, G – 2 очка;
# ● B, C, M, P – 3 очка;
# ● F, H, V, W, Y – 4 очка;
# ● K – 5 очков;
# ● J, X – 8 очков;
# ● Q, Z – 10 очков.
# А русские буквы оцениваются так:
# ● А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# ● Д, К, Л, М, П, У – 2 очка;
# ● Б, Г, Ё, Ь, Я – 3 очка;
# ● Й, Ы – 4 очка;
# ● Ж, З, Х, Ц, Ч – 5 очков;
# ● Ш, Э, Ю – 8 очков;
# ● Ф, Щ, Ъ – 10 очков.

# Напишите программу, которая вычисляет стоимость введенного пользователем слова. 
# Будем считать, что на вход подается только одно слово, 
# которое содержит либо только английские, либо только русские буквы.



# letters_values = {
#     'A': 1, 'B': 3, 'C': 3, 'D': 2, 'E': 1, 'F': 4, 'G': 2, 'H': 4,
#     'I': 1, 'J': 8, 'K': 5, 'L': 1, 'M': 3, 'N': 1, 'O': 1, 'P': 3,
#     'Q': 10, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 4, 'W': 4, 'X': 8,
#     'Y': 4, 'Z': 10
# }

# rus_letters_values = {
#     'А': 1, 'Б': 3, 'В': 1, 'Г': 3, 'Д': 2, 'Е': 1, 'Ё': 3, 'Ж': 5,
#     'З': 5, 'И': 1, 'Й': 4, 'К': 2, 'Л': 2, 'М': 2, 'Н': 1, 'О': 1,
#     'П': 2, 'Р': 1, 'С': 1, 'Т': 1, 'У': 2, 'Ф': 10, 'Х': 5, 'Ц': 5,
#     'Ч': 5, 'Ш': 8, 'Щ': 10, 'Ъ': 10, 'Ы': 4, 'Ь': 3, 'Э': 8, 'Ю': 8,
#     'Я': 3
# }

# word = input().upper() # считываем слово и переводим его в верхний регистр

# total_score = 0 # инициализируем общий счет нулем

# for letter in word:
#     if letter in letters_values: # если буква английская
#         total_score += letters_values[letter] # добавляем очки за букву
#     elif letter in rus_letters_values: # если буква русская
#         total_score += rus_letters_values[letter] # добавляем очки за букву

# print(total_score) # выводим общий счет

# Решение 2 самое лучшее 
# letters_values = {
#     'A': 1, 'B': 3, 'C': 3, 'D': 2, 'E': 1, 'F': 4, 'G': 2, 'H': 4,
#     'I': 1, 'J': 8, 'K': 5, 'L': 1, 'M': 3, 'N': 1, 'O': 1, 'P': 3,
#     'Q': 10, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 4, 'W': 4, 'X': 8,
#     'Y': 4, 'Z': 10 , 'А': 1, 'Б': 3, 'В': 1, 'Г': 3, 'Д': 2, 'Е': 1, 'Ё': 3, 'Ж': 5,
#     'З': 5, 'И': 1, 'Й': 4, 'К': 2, 'Л': 2, 'М': 2, 'Н': 1, 'О': 1,
#     'П': 2, 'Р': 1, 'С': 1, 'Т': 1, 'У': 2, 'Ф': 10, 'Х': 5, 'Ц': 5,
#     'Ч': 5, 'Ш': 8, 'Щ': 10, 'Ъ': 10, 'Ы': 4, 'Ь': 3, 'Э': 8, 'Ю': 8,
#     'Я': 3
# }

# word = input().upper() # считываем слово и переводим его в верхний регистр

# total_score = 0 # инициализируем общий счет нулем

# for letter in word:
#     if letter in letters_values: # если буква английская
#         total_score += letters_values[letter] # добавляем очки за букву

# print(total_score) # выводим общий счет


# Решение преподавателя 
# scrabble = {1:'AEIOULNSTRАВЕИНОРСТ', 2: 'DGДКЛМПУ', 
# 3: 'BCMPБГЁЬЯ', 4: 'FHVWYЙЫ', 5: 'KЖЗХЦЧ', 8: 'JXШЭЮ', 10: 'QZФЩЪ'}
# word = 'ноутбук'.upper()
# res_lst_1 = [k for i in word for k, v in scrabble.items() if i in v]
# print(sum(res_lst_1))

# res_lst_2 = []
# for letter in word:
#     for k, v in scrabble.items():
#         if letter in v:
#             res_lst_2.append(k)
#             break

# Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. 
# m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.

# n = int(input('Вводим размер первого n: ')) # кол-во элементов первого множества
# m = int(input('Вводим размер второго m: ')) # кол-во элементов второго множества

# set1 = set(map(int, input('Видите числа через пробел: ').split())) # первое множество
# set2 = set(map(int, input('Видите числа через пробел: ').split())) # второе множество

# # находим пересечение множеств
# intersection = set1.intersection(set2)

# # сортируем и выводим результат
# result = sorted(intersection)
# print(*result)


# Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. 
# Она растёт на круглой грядке, причём кусты высажены только по окружности. 
# Таким образом, у каждого куста есть ровно два соседних. 
# Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них 
# выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. 
# Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, 
# собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать 
# за один заход собирающий модуль, находясь перед некоторым кустом заданной 
# во входном файле грядки.

# n = int(input('Ввод колличество кустов: ')) # кол-во кустов
# berries = list(map(int, input('Ягоды введите через пробел: ').split())) # список с кол-вом ягод на каждом кусте

# max_berries = 0 # переменная для хранения максимального кол-ва ягод

# for i in range(n): # перебираем каждый куст
#     # считаем кол-во ягод, которые можно собрать с текущего куста и двух соседних
#     curr_berries = berries[i] + (berries[(i-1)%n] if n>1 else 0) + (berries[(i+1)%n] if n>1 else 0)
#     # если текущее кол-во ягод больше максимального, то обновляем максимальное значение
#     max_berries = max(max_berries, curr_berries)

# print(max_berries)

